Draft

Passo 1: Orgnizar estrutura [x]
Passo 2: Organizar serviço com mongodb e beanstalk [x]
Passo 3: Garantir ACID na transferencia (Saga pattern na mensageria) [x]
Passo 4: Enviar notificação em caso de Ok ou Falha [x]
    (lembrar de tratar também a indisponibilidade do serviço de e-mail) [x]
Passo 5: Fazer testes [x]
(PROBLEMA COM TESTES: Não conseguir replicar a env de teste para todo
o sistema para que eles identifiquem que as models identifiquem que a alteração é para ser feita no banco de teste.)

Remind :
FAZER DOCUMENTAÇÃO []
Tratar erros de inconsistencia nos users (Registrar mesmo cpf & email) []
Fazer containers de injeção de dependencia (middleware) []
Fazer validação para models []
Utilizar enums []
Colocar content-type acceptable no restful []
Observabilidade das exceções gerais no index.php []
Fazer fluxograma []


------------
Você pode implementar o que achar conveniente, porém vamos nos atentar somente ao fluxo de transferência entre dois usuários. A implementação deve seguir o contrato abaixo.

POST /transfer
Content-Type: application/json

{
  "value": 100.0,
  "payer": 4,
  "payee": 15
}
-------------


Salvar os users no mongodb na collection users(_id, nome, email, cpf, lojistas)
Para fazer a transferencia o fluxo será:

(Verificar possibilidade de usar o Chain of responsibility)
if (Verificar se payer e payee existem) { [x]
    if (Verificar se o user é lojista ou não) { [x]
        if (Tem saldo suficiente) { [x]
            if (Consultar serviço verificador) { [x]

            } else { [x]
                handle da Fail do serviço
            }
        } else {
            throw Saldo insuficiente.
        }
    } else {
        throw Lojista não envia dinheiro.
    }
} else {
    throw Um dos usuarios não existem. (Cuidado para não expor dado sensivel.)
}

    